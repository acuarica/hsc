
let eqn={n->{m->case n of
  Z -> case m of
    Z -> True;
    S m' -> False;;
  S n' -> case m of
    Z -> False;
    S m' -> eqn n' m';;
  }} in
let plus={n->{m->case n of
    Z -> m;
    S n' -> S (plus n' m);
  }} in
let len={xs->case xs of
    Nil -> Z;
    Cons x' xs' -> S (len xs');
  } in
let append={xs->{ys->case xs of
  Nil -> ys;
  Cons x' xs' -> Cons x' (append xs' ys);
}} in
--eqn (len bs) (len bs)
--eqn (len (append [] bs)) (len bs)
--eqn x (plus Z x)
--eqn (len bs) (plus Z (len bs))
--eqn (len (append [] bs)) (plus Z (len bs))
eqn (len (append as bs)) (plus (len as) (len bs))
